All Orca TODO's are maintained as RFE's and bugs in the GNOME bugzilla
database:  http://bugzilla.gnome.org/buglist.cgi?query=product%3Aorca

Roadmap for Plugin Based Orca:
# Stage 1 (ALL DONE)
- (DONE): implement Plugin System Manager what handles all our plugin stuff
- (DONE): migrate some example plugins
    -- (DONE): Clipboard
    -- (DONE): Preferences
    -- (DONE): SelfVoice
    -- (DONE): Time
    -- (DONE): Date
    -- (DONE): MouseReview
    -- (DONE): HelloOrca
    -- (DONE): ByeOrca
    -- (DONE): HelloWorld
- (DONE): implement a base plugin class to have an unify Plugin API
- (DONE): Dynamic API Manager to let plugins register its own bits of functionality for global usage (also used for compatibiltiy)
- (DONE): initial "orca" class to hold all of orcas API. so we can easy share it with plugins
- (DONE): create a basic plugin manager:
    -- (DONE): install
    -- (DONE): uninstall
    -- (DONE): activate plugins
    -- (DONE): details
- (DONE): compatibiltiy: 
    -- (DONE): ability to register shortcuts in current structure
    -- (DONE): place current objects in Dynamic API Manager
    -- (DONE): use existing settings to store plugin activ states

# Stage 2 (ALL DONE)
- (DONE): Translation API: Plugins store its own translation. we should provide an unify way to consume it. maybe implemented into plugin.plugin?
    -- (DONE): plugins can bring its own translations
    -- (DONE): plugins can use orcas build in translations
- (DONE): Orca should track by Plugins registered stuff like 
    -- (DONE): gestures
    -- (DONE): event subscription
    -- (DONE): signals
    -- (DONE): api
- (DONE): Orca should unregister the by the Plugins registered stuff by itself on unload
    -- (DONE): gestures
    -- (DONE): event subscription
    -- (DONE): signals
    -- (DONE): api
- (DONE):
    -- (DONE): allow None context (orca core)
    -- (DONE): improve API
- (DONE): Dont trust plugins, hardening core against crashes in callbacks
    -- (DONE): gestures
    -- (DONE): event subscription
- (DONE): ability to call code while plugin un-/ installation
    -- (DONE): onPostInstall
    -- (DONE): onPreUninstall

# Stage 3 (TODO)
- (TODO): Per Plugin settings: Plugins come along with its own settings (structure, defaults). We need an unify API to. The Settings are handled by Gsettings instead of JSON:
    -- (TODO): install (along with the plugin)
    -- (TODO): uninstall (along with the plugin)
    -- (TODO): upgrade
    -- (TODO): load
    -- (TODO): save
    -- (TODO): reset
    -- (TODO): check compatibiltiy
    -- (TODO): scope: profiles
    -- (TODO): scope: per application
- (TODO): generic preferences
    -- (TODO): List based
    -- (TODO): generic
        --- (TODO): default
            ---- (TODO): Radio Buttons
            ---- (TODO): Menu Buttons
            ---- (TODO): Booleans
            ---- (TODO): Integer Min / Max
            ---- (TODO): slider
        --- (TODO): custom
            ---- (TODO): Tables 
            ---- (TODO): Forms
            ---- (TODO): any widget
        --- (TODO): # other
            ---- (TODO): dependency value for simple enable / disable
    -- (TODO): agnostic to installed plugins
    -- (TODO): searchable
    -- (TODO): set values
    -- (TODO): reset to default value
    -- (TODO): load
    -- (TODO): save
    -- (TODO): export
    -- (TODO): import
    -- (TODO): keyboard
    -- (TODO): punctuation
    -- (TODO): scope: global
    -- (TODO): scope: profiles
    -- (TODO): scope: per application
# Documentation:
- https://git.launchpad.net/ubuntu/+source/gnome-orca/commit/?h=applied/ubuntu/bionic&id=b2d49a3f250881eff036b1ebfc97148fe94acf75
- https://www.micahcarrick.com/gsettings-python-gnome-3.html
- https://stackoverflow.com/questions/24407025/how-do-i-use-g-settings-schema-get-key-from-python
- https://encarsia.github.io/posts/gsettings/
- http://zderadicka.eu/gsettings-flexible-configuration-system/
- https://qastack.com.de/ubuntu/251712/how-can-i-install-a-gsettings-schema-without-root-privileges
- https://docs.gtk.org/glib/gvariant-format-strings.html

# Final Stage 4 (TODO)
- (TODO): Create an clean "orca" class and object based API
- (TODO): create useful signals
- (TODO): Remove compatibiltiy layers
- (TODO): cleanup as much as possible
- (TODO): move all parts into plugins
    -- (TODO): Move source into Plugins
    -- (TODO): Move Settings into Plugins
    -- (TODO): Move Translation into Plugins
- (TODO): Bugfixing and hardening
- (TODO): Release :)

Known Bugs:
- (DONE) PluginManager is not translated on first start
- (TODO) Plugins enable / disable state not stored without manuall add setting to user-settings.conf: "activePlugins": [],
- (DONE) Profile selector does not open at preferences page
- (DONE) ByeOrca is not announced


Plguin readme:
Translation
# read text from python file
xgettext -d orca-plugin -o orca-plugin.pot ../HelloWorld.py
# compile to mo
msgfmt -o orca-plugin.mo orca-plugin
